     1                                  ; OZ - A more utopian OS
     2                                  ; ex: set expandtab softtabstop=4 shiftwidth=4 nowrap :
     3                                  ;
     4                                  ;
     5                                  ;       initialize x86 cpus -- Semetric Multi Processing start up
     6                                  ;
     7                                  ;
     8                                  ; requires: nasm-2.07  or later from: http://www.nasm.us
     9                                  ;
    10                                  ; contributors:
    11                                  ;        djv - Duane Voth
    12                                  ;
    13                                  ; history:
    14                                  ; 2009/09/04 - 0.00.01 - djv - create an ozapp asm example
    15                                  
    16                                  [map symbols initsmp.map]
    17                                  
    18                                  bits 32
    19                                  org 0x400000                    ; ozapp program load address
    20                                  
    21                                  ; ozapp header
    22                                  
    23                                  header :
    24 00000000 6F7A617070000000            db  "ozapp",0,0,0
    25 00000008 0F00                        dw  15              ; arch = x86
    26 0000000A 1F00                        dw  31              ; subarch = oz protected mode, 4gb flat
    27 0000000C 0000                        dw  0
    28 0000000E 0000                        dw  0
    29 00000010 [0010000000000000]          dq  end             ;end-header
    30 00000018 [1401000000000000]          dq  start
    31 00000020 [0010000000000000]          dq  data
    32                                  
    33                                  ; r/o data and code - the first 4k -------------------------------
    34                                  
    35 00000028 696E6974736D703A20-     announce   db "initsmp: ", 0
    35 00000031 00                 
    36 00000032 343836206F72206C6F-     cpu486     db "486 or lower", 0
    36 0000003B 77657200           
    37 0000003F 3538362C00              cpu586     db "586,", 0
    38 00000044 696E74656C2C00          cpuintl    db "intel,", 0
    39 0000004B 616D642C00              cpuamd     db "amd,", 0
    40 00000050 756E6B6E6F776E2076-     cpuxxx     db "unknown vendor", 0
    40 00000059 656E646F7200       
    41 0000005F 6E6F20637075696400      cpunoid    db "no cpuid", 0
    42 00000068 617069632C69643D00      cpuapic    db "apic,id=", 0
    43 00000071 6E6F20617069632C00      cpunoapic  db "no apic,", 0
    44 0000007A 6C617069632C00          cpulapic   db "lapic,", 0
    45 00000081 6E6F206C6170696300      cpunolapic db "no lapic", 0
    46 0000008A 7832617069632C00        cpux2apix  db "x2apic,", 0
    47 00000092 6D776169742C00          cpumwait   db "mwait,",0
    48 00000099 766D7800                cpuvmx     db "vmx", 0
    49 0000009D 617661696C61626C65-     cpuavil    db "available", 0
    49 000000A6 00                 
    50 000000A7 756E617661696C6162-     cpuunavil  db "unavailable", 0
    50 000000B0 6C6500             
    51 000000B3 2D00                    cpuzzz     db "-", 0
    52                                  
    53                                  ; ----------------------------
    54                                  ;    puts - write a null delimited string to a buffer
    55                                  ;
    56                                  ;    enter:
    57                                  ;         esi - address of string
    58                                  ;         ebx - address of output buffer
    59                                  ;    exit:
    60                                  ;         eax - destroyed
    61                                  ;         ebx - next location in output buffer
    62                                  
    63                                  puts :
    64                                  puts_loop :
    65 000000B5 AC                          lodsb
    66 000000B6 3C00                        cmp  al,0
    67 000000B8 7407                        jz   puts_done
    68 000000BA 8803                        mov  [ebx],al
    69 000000BC 83C301                      add  ebx,1
    70 000000BF EBF4                        jmp  puts_loop
    71                                  
    72                                  puts_done :
    73 000000C1 C3                          ret
    74                                  
    75                                  ; ----------------------------
    76                                  ;    putx  - write the contents of eax in hex to a buffer (8 digits)
    77                                  ;    putbx - write the contents of  al in hex to a buffer (2 digits)
    78                                  ;
    79                                  ;    enter:
    80                                  ;         eax - value to convert to hex
    81                                  ;         ebx - address of output buffer
    82                                  ;    exit:
    83                                  ;         ebx - next location in output buffer
    84                                  ;         ecx - destroyed
    85                                  
    86                                  putbx :
    87 000000C2 B902000000                  mov  ecx,2
    88 000000C7 25FF000000                  and  eax,0xff
    89 000000CC C1C018                      rol  eax,24
    90 000000CF EB05                        jmp putx_loop
    91                                  
    92                                  putx :
    93 000000D1 B908000000                  mov  ecx,8
    94                                  
    95                                  putx_loop :
    96 000000D6 C1C004                      rol  eax,4
    97 000000D9 50                          push eax
    98 000000DA 240F                        and  al,0xf
    99 000000DC 3C09                        cmp  al,9
   100 000000DE 7704                        ja   putx_hexdigit
   101 000000E0 0430                        add  al,'0'
   102 000000E2 EB02                        jmp short putx_putc
   103                                  
   104                                  putx_hexdigit :
   105 000000E4 0457                        add  al,'a'-10
   106                                  
   107                                  putx_putc :
   108 000000E6 8803                        mov  [ebx],al
   109 000000E8 83C301                      add  ebx,1
   110 000000EB 58                          pop  eax
   111 000000EC 83E0F0                      and  eax,0xfffffff0
   112 000000EF E2E5                        loop putx_loop
   113 000000F1 C6032C                      mov  byte [ebx],','
   114 000000F4 83C301                      add  ebx,1
   115 000000F7 C3                          ret
   116                                  
   117                                  ; ----------------------------
   118                                  ;    wait for ipi to complete
   119                                  ;
   120                                  ;    exit:
   121                                  ;       all regs preserved (except flags)
   122                                  
   123                                  ipi_wait :
   124 000000F8 52                          push edx
   125 000000F9 50                          push eax
   126                                  
   127                                  ipi_delay_loop :
   128                                      ; always delay one tick
   129 000000FA B800200000                  mov  eax,0x2000         ; oz syscall - sleep 1 tick
   130 000000FF BA01000000                  mov  edx,1
   131 00000104 CDFF                        int  0xff
   132                                  
   133 00000106 A10003E0FE                  mov  eax,[0xfee00300]               ; seen 0x0c0602, 0x0c4607
   134 0000010B 0FBAE00C                    bt   eax,12                         ; watch delivery status
   135 0000010F 72E9                        jc   ipi_delay_loop
   136                                  
   137                                  ipi_delay_done :
   138 00000111 58                          pop  eax
   139 00000112 5A                          pop  edx
   140 00000113 C3                          ret
   141                                  
   142                                  
   143                                  ; ----------------------------
   144                                  ;   main
   145                                  
   146                                  start :
   147                                  
   148 00000114 BB[00000000]                mov  ebx,print_buf
   149 00000119 BE[28000000]                mov  esi,announce
   150 0000011E E892FFFFFF                  call puts
   151 00000123 53                          push ebx
   152                                  
   153                                      ; ---- check on our processor type
   154                                  
   155 00000124 9C                          pushfd
   156 00000125 58                          pop  eax                ; get flags
   157 00000126 89C3                        mov  ebx,eax            ; save
   158 00000128 B900002000                  mov  ecx,1 << 21        ; ID flag (bit 21)
   159 0000012D 31C8                        xor  eax,ecx
   160 0000012F 50                          push eax
   161 00000130 9D                          popfd
   162 00000131 9C                          pushfd
   163 00000132 58                          pop  eax
   164 00000133 53                          push ebx
   165 00000134 9D                          popfd                   ; restore flags
   166 00000135 21CB                        and  ebx,ecx
   167 00000137 21C8                        and  eax,ecx
   168 00000139 39D8                        cmp  eax,ebx            ; if flag is stuck, then 486
   169 0000013B 5B                          pop  ebx
   170 0000013C BE[32000000]                mov  esi,cpu486
   171 00000141 0F8477010000                jz   cpuid_last_puts
   172                                      ;mov  esi,cpu586
   173                                      ;call puts
   174 00000147 53                          push ebx
   175                                  
   176 00000148 31C0                        xor  eax,eax
   177 0000014A 0FA2                        cpuid                   ; its at least a Pentium, use cpuid
   178 0000014C A3[00020000]                mov  [level],eax
   179 00000151 891D[10020000]              mov  [id_buf],ebx
   180 00000157 8915[14020000]              mov  [id_buf+4],edx
   181 0000015D 890D[18020000]              mov  [id_buf+8],ecx
   182                                  
   183 00000163 BE[4B000000]                mov  esi,cpuamd
   184 00000168 81F963414D44                cmp  ecx,0x444d4163     ; test for 'cAMD' in ecx
   185 0000016E 7418                        jz   cpu_recognized
   186 00000170 BE[44000000]                mov  esi,cpuintl
   187 00000175 81F96E74656C                cmp  ecx,0x6c65746e     ; test for 'ntel' in ecx
   188 0000017B 740B                        jz   cpu_recognized
   189 0000017D 5B                          pop  ebx
   190 0000017E BE[10020000]                mov  esi,id_buf
   191 00000183 E936010000                  jmp  cpuid_last_puts
   192                                  
   193                                  cpu_recognized :
   194 00000188 5B                          pop  ebx
   195 00000189 E827FFFFFF                  call puts
   196                                  
   197 0000018E 53                          push ebx
   198 0000018F B801000000                  mov  eax,1
   199 00000194 0FA2                        cpuid
   200 00000196 891D[04020000]              mov  [feature_ebx],ebx
   201 0000019C 890D[08020000]              mov  [feature_ecx],ecx  ; save feature flags
   202 000001A2 8915[0C020000]              mov  [feature_edx],edx
   203 000001A8 83F801                      cmp  eax,1
   204 000001AB BE[5F000000]                mov  esi,cpunoid
   205 000001B0 5B                          pop  ebx
   206 000001B1 0F8207010000                jb   cpuid_last_puts
   207                                  
   208 000001B7 53                          push ebx
   209 000001B8 81E200020000                and  edx,1 << 9         ; test for apic feature
   210 000001BE BE[71000000]                mov  esi,cpunoapic
   211 000001C3 5B                          pop  ebx
   212 000001C4 0F84F4000000                jz   cpuid_last_puts
   213 000001CA BE[68000000]                mov  esi,cpuapic
   214 000001CF E8E1FEFFFF                  call puts
   215                                  
   216 000001D4 A1[04020000]                mov  eax,[feature_ebx]
   217 000001D9 C1E818                      shr  eax,24             ; mask off initial apic ID
   218 000001DC E8E1FEFFFF                  call putbx
   219                                  
   220                                      ; ---- mtrr for 0xfee00000 -> strong uncachable (UC)
   221                                  
   222                                      ; ---- access the local APIC
   223                                  
   224 000001E1 53                          push ebx
   225 000001E2 A13000E0FE                  mov  eax,[0xfee00030]
   226 000001E7 89C1                        mov  ecx,eax
   227 000001E9 25F0000000                  and  eax,0xf0           ; see if it is a local apic
   228 000001EE 83F810                      cmp  eax,0x10
   229 000001F1 5B                          pop  ebx
   230 000001F2 BE[81000000]                mov  esi,cpunolapic
   231 000001F7 0F85C1000000                jnz  cpuid_last_puts
   232 000001FD BE[7A000000]                mov  esi,cpulapic
   233 00000202 E8AEFEFFFF                  call puts
   234                                  
   235 00000207 A1[08020000]                mov  eax,[feature_ecx]
   236 0000020C 2500002000                  and  eax,1 << 21        ; x2apic feature bit
   237 00000211 740A                        jz   no_x2apic
   238 00000213 BE[8A000000]                mov  esi,cpux2apix
   239 00000218 E898FEFFFF                  call puts
   240                                  no_x2apic :
   241                                  
   242 0000021D 89C8                        mov  eax,ecx
   243 0000021F E8ADFEFFFF                  call putx               ; Athlon +1600 says 0x00040010
   244                                                              ; Bochs        says 0x00050010
   245                                                              ; real intel   says 0x00050014
   246                                                              ; qemu         says 0x00050014
   247                                                              ; real amd     says 0x80050014
   248                                                              ; recent intel says 0x01060015
   249                                  
   250                                  ;   mov  ecx,0x1b
   251                                  ;   rdmsr
   252                                  ;   and  eax,0x100          ; are we the bootstrap processor?
   253                                  ;   jz   i_am_non_boot_cpu
   254                                  
   255                                      ; ---- restart other cpus (see swdev3a, sec 10.7, pg 484 / 10-45)
   256                                  
   257 00000224 53                          push ebx
   258                                  
   259 00000225 C7050003E0FE00050C-         mov  dword [0xfee00300],0x000c0500  ; INIT (physical, fixed, excluding self)
   259 0000022E 00                 
   260 0000022F E8C4FEFFFF                  call ipi_wait
   261                                  
   262 00000234 B800FE0000                  mov  eax,0xfe00         ; oz syscall - get sipi_vector
   263 00000239 CDFF                        int  0xff
   264 0000023B C1E80C                      shr  eax,12
   265                                  
   266 0000023E 0D00460C00                  or   eax,0xc4600        ; STARTUP
   267 00000243 A30003E0FE                  mov  dword [0xfee00300],eax
   268 00000248 E8ABFEFFFF                  call ipi_wait
   269                                  
   270                                  ;   pop  ebx
   271                                  ;   mov  eax,ecx
   272                                  ;   call putx
   273                                  ;   mov  byte [ebx],'*'
   274                                  ;   inc  ebx
   275                                  ;   push ebx
   276                                  
   277                                      ; ---- report on the expected number of logical processors in each core
   278                                  
   279 0000024D A1[04020000]                mov  eax,[feature_ebx]
   280 00000252 C1E810                      shr  eax,16
   281 00000255 25FF000000                  and  eax,0xff           ; number of threads per core
   282 0000025A 83C030                      add  eax,'0'
   283 0000025D 5B                          pop  ebx
   284 0000025E 8803                        mov  [ebx],al
   285 00000260 43                          inc  ebx
   286 00000261 C6033B                      mov  byte [ebx],';'
   287 00000264 43                          inc  ebx
   288                                  
   289 00000265 A1[08020000]                mov  eax,[feature_ecx]
   290 0000026A E862FEFFFF                  call putx
   291                                  
   292                                      ; ---- check for mwait support
   293                                  
   294 0000026F A1[08020000]                mov  eax,[feature_ecx]
   295 00000274 83E008                      and  eax,1 << 3         ; mwait feature bit
   296 00000277 7416                        jz   no_mwait
   297 00000279 53                          push ebx
   298 0000027A B805000000                  mov  eax,5
   299 0000027F 0FA2                        cpuid
   300 00000281 C1E310                      shl  ebx,16             ; shift large value to upper 16
   301 00000284 6689C3                      mov  bx,ax
   302 00000287 89D8                        mov  eax,ebx
   303 00000289 5B                          pop  ebx
   304 0000028A E842FEFFFF                  call putx
   305                                  no_mwait :
   306                                  
   307                                      ; ---- check for vmx support
   308                                  
   309 0000028F A1[08020000]                mov  eax,[feature_ecx]
   310 00000294 83E020                      and  eax,1 << 5         ; vmx feature bit
   311 00000297 740A                        jz   no_vmx
   312 00000299 BE[99000000]                mov  esi,cpuvmx
   313 0000029E E812FEFFFF                  call puts
   314                                  no_vmx :
   315                                  
   316                                  ; can't rdmsr from ring 3
   317                                  ;   mov  ecx,0x3a           ; IA32_FEATURE_CONTROL_MSR
   318                                  ;   rdmsr
   319                                  ;   call putx
   320                                  
   321                                      ; cpuunavil
   322                                  
   323                                      ; ---- get the topology
   324                                  
   325 000002A3 833D[00020000]0B            cmp  dword [level],0xb
   326 000002AA 720B                        jb   no_topology
   327 000002AC 53                          push ebx
   328 000002AD B80B000000                  mov  eax,0xb
   329 000002B2 31C9                        xor  ecx,ecx
   330 000002B4 0FA2                        cpuid
   331                                      ; ....
   332 000002B6 5B                          pop  ebx
   333                                  
   334                                  no_topology :
   335                                  
   336 000002B7 EB0A                        jmp  cpuid_end
   337                                  
   338                                  i_am_non_boot_cpu :
   339 000002B9 BE[B3000000]                mov  esi,cpuzzz
   340                                  
   341                                  cpuid_last_puts :
   342 000002BE E8F2FDFFFF                  call puts
   343                                  cpuid_end :
   344                                  
   345 000002C3 B800020000                  mov  eax,0x0200         ; oz syscall opcode - klog print
   346 000002C8 BE[00000000]                mov  esi,print_buf
   347 000002CD CDFF                        int  0xff
   348                                  
   349 000002CF CF                          iret
   350                                  
   351                                  ;   align 4096
   352                                  
   353 000002D0 00<rept>                    times 4096-($-$$) db 0x00
   354                                  
   355                                  data :
   356                                  
   357                                  ; r/w data - the second 4k ---------------------------------------
   358                                  section .data
   359                                  
   360                                  print_buf :                     ; 0x401000 the buffer to be written
   361                                  
   362 00000000 00<rept>                    times 512 db 0x00
   363                                  
   364 00000200 00000000                level       dd 0
   365 00000204 00000000                feature_ebx dd 0                ; saved feature flags
   366 00000208 00000000                feature_ecx dd 0
   367 0000020C 00000000                feature_edx dd 0
   368                                  
   369                                  id_buf :                        ; 0x401240
   370                                  
   371                                      ; all boot apps attached to the kernel must be
   372                                      ; a multiple of a page in length.  this space
   373                                      ; is also used for the application stack
   374                                  
   375 00000210 00<rept>                    times 4096*1-($-$$) db 0x00
   376                                  
   377                                  end :
   378                                  
