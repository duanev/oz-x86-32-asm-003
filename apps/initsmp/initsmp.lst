     1                                  ; OZ - A more utopian OS
     2                                  ; ex: set expandtab softtabstop=4 shiftwidth=4 nowrap :
     3                                  ;
     4                                  ;
     5                                  ;       initialize x86 cpus -- Semetric Multi Processing start up
     6                                  ;
     7                                  ;
     8                                  ; requires: nasm-2.07  or later from: http://www.nasm.us
     9                                  ;
    10                                  ; contributors:
    11                                  ;        djv - Duane Voth
    12                                  ;
    13                                  ; history:
    14                                  ; 2009/09/04 - 0.00.01 - djv - create an ozapp asm example
    15                                  
    16                                  [map symbols initsmp.map]
    17                                  
    18                                  bits 32
    19                                  org 0x400000                    ; ozapp program load address
    20                                  
    21                                  kstack_loc  equ     0x1000      ; a priori knowlege of kernel stack ...
    22                                  
    23                                  ; ozapp header
    24                                  
    25                                  header :
    26 00000000 6F7A617070000000            db  "ozapp",0,0,0
    27 00000008 0F00                        dw  15              ; arch = x86
    28 0000000A 1F00                        dw  31              ; subarch = oz protected mode, 4gb flat
    29 0000000C 0000                        dw  0
    30 0000000E 0000                        dw  0
    31 00000010 [0010000000000000]          dq  end             ;end-header
    32 00000018 [EA00000000000000]          dq  start
    33                                  
    34                                  ; r/o data and code - the first 4k -------------------------------
    35                                  
    36 00000020 696E6974736D703A20-     announce   db "initsmp: ", 0
    37 00000029 00                 
    38 0000002A 343836206F72206C6F-     cpu486     db "486 or lower", 0
    39 00000033 77657200           
    40 00000037 3538362C00              cpu586     db "586,", 0
    41 0000003C 696E74656C2C00          cpuintl    db "intel,", 0
    42 00000043 616D642C00              cpuamd     db "amd,", 0
    43 00000048 756E6B6E6F776E2076-     cpuxxx     db "unknown vendor", 0
    44 00000051 656E646F7200       
    45 00000057 6E6F20637075696400      cpunoid    db "no cpuid", 0
    46 00000060 617069632C69643D00      cpuapic    db "apic,id=", 0
    47 00000069 6E6F20617069632C00      cpunoapic  db "no apic,", 0
    48 00000072 6C617069632C00          cpulapic   db "lapic,", 0
    49 00000079 6E6F206C6170696300      cpunolapic db "no lapic", 0
    50 00000082 7832617069632C00        cpux2apix  db "x2apic,", 0
    51 0000008A 766D782D00              cpuvmx     db "vmx-", 0
    52 0000008F 617661696C61626C65-     cpuavil    db "available", 0
    53 00000098 00                 
    54 00000099 756E617661696C6162-     cpuunavil  db "unavailable", 0
    55 000000A2 6C6500             
    56 000000A5 2D00                    cpuzzz     db "-", 0
    57                                  
    58                                  ; ----------------------------
    59                                  ;    puts - write a null delimited string to a buffer
    60                                  ;
    61                                  ;    enter:
    62                                  ;         esi - address of string
    63                                  ;         ebx - address of output buffer
    64                                  ;    exit:
    65                                  ;         eax - destroyed
    66                                  ;         ebx - next location in output buffer
    67                                  
    68                                  puts :
    69                                  puts_loop :
    70 000000A7 AC                          lodsb
    71 000000A8 3C00                        cmp  al,0
    72 000000AA 7407                        jz   puts_done
    73 000000AC 8803                        mov  [ebx],al
    74 000000AE 83C301                      add  ebx,1
    75 000000B1 EBF4                        jmp  puts_loop
    76                                  
    77                                  puts_done :
    78 000000B3 C3                          ret
    79                                  
    80                                  ; ----------------------------
    81                                  ;    putx  - write the contents of eax in hex to a buffer (8 digits)
    82                                  ;    putbx - write the contents of  al in hex to a buffer (2 digits)
    83                                  ;
    84                                  ;    enter:
    85                                  ;         eax - value to convert to hex
    86                                  ;         ebx - address of output buffer
    87                                  ;    exit:
    88                                  ;         ebx - next location in output buffer
    89                                  ;         ecx - destroyed
    90                                  
    91                                  putbx :
    92 000000B4 B902000000                  mov  ecx,2
    93 000000B9 25FF000000                  and  eax,0xff
    94 000000BE C1C018                      rol  eax,24
    95 000000C1 EB05                        jmp putx_loop
    96                                  
    97                                  putx :
    98 000000C3 B908000000                  mov  ecx,8
    99                                  
   100                                  putx_loop :
   101 000000C8 C1C004                      rol  eax,4
   102 000000CB 50                          push eax
   103 000000CC 240F                        and  al,0xf
   104 000000CE 3C09                        cmp  al,9
   105 000000D0 7704                        ja   putx_hexdigit
   106 000000D2 0430                        add  al,'0'
   107 000000D4 EB02                        jmp short putx_putc
   108                                  
   109                                  putx_hexdigit :
   110 000000D6 0457                        add  al,'a'-10
   111                                  
   112                                  putx_putc :
   113 000000D8 8803                        mov  [ebx],al
   114 000000DA 83C301                      add  ebx,1
   115 000000DD 58                          pop  eax
   116 000000DE 83E0F0                      and  eax,0xfffffff0
   117 000000E1 E2E5                        loop putx_loop
   118 000000E3 C6032C                      mov  byte [ebx],','
   119 000000E6 83C301                      add  ebx,1
   120 000000E9 C3                          ret
   121                                  
   122                                  ; ----------------------------
   123                                  ;    delay - wait for a few milliseconds
   124                                  ;
   125                                  ;    enter:
   126                                  ;         eax - 
   127                                  ;         ebx - 
   128                                  ;    exit:
   129                                  ;         ebx - 
   130                                  ;         ecx - destroyed
   131                                  
   132                                  
   133                                  ; ----------------------------
   134                                  ;   main
   135                                  
   136                                  start :
   137                                  
   138 000000EA BB[00000000]                mov  ebx,print_buf
   139 000000EF BE[20000000]                mov  esi,announce
   140 000000F4 E8AEFFFFFF                  call puts
   141 000000F9 53                          push ebx
   142                                  
   143                                      ; ---- check on our processor type
   144                                  
   145 000000FA 9C                          pushfd
   146 000000FB 58                          pop  eax                ; get flags
   147 000000FC 89C3                        mov  ebx,eax            ; save
   148 000000FE B900002000                  mov  ecx,1 << 21        ; ID flag (bit 21)
   149 00000103 31C8                        xor  eax,ecx
   150 00000105 50                          push eax
   151 00000106 9D                          popfd
   152 00000107 9C                          pushfd
   153 00000108 58                          pop  eax
   154 00000109 53                          push ebx
   155 0000010A 9D                          popfd                   ; restore flags
   156 0000010B 21CB                        and  ebx,ecx
   157 0000010D 21C8                        and  eax,ecx
   158 0000010F 39D8                        cmp  eax,ebx            ; if flag is stuck, then 486
   159 00000111 5B                          pop  ebx
   160 00000112 BE[2A000000]                mov  esi,cpu486
   161 00000117 0F847B010000                jz   cpuid_last_puts
   162 0000011D BE[37000000]                mov  esi,cpu586
   163 00000122 E880FFFFFF                  call puts
   164 00000127 53                          push ebx
   165                                  
   166 00000128 31C0                        xor  eax,eax
   167 0000012A 0FA2                        cpuid                   ; its at least a Pentium, use cpuid
   168 0000012C A3[00020000]                mov  [level],eax
   169 00000131 891D[10020000]              mov  [id_buf],ebx
   170 00000137 8915[14020000]              mov  [id_buf+4],edx
   171 0000013D 890D[18020000]              mov  [id_buf+8],ecx
   172                                  
   173 00000143 BE[43000000]                mov  esi,cpuamd
   174 00000148 81F963414D44                cmp  ecx,0x444d4163     ; test for 'cAMD' in ecx
   175 0000014E 7418                        jz   cpu_recognized
   176 00000150 BE[3C000000]                mov  esi,cpuintl
   177 00000155 81F96E74656C                cmp  ecx,0x6c65746e     ; test for 'ntel' in ecx
   178 0000015B 740B                        jz   cpu_recognized
   179 0000015D 5B                          pop  ebx
   180 0000015E BE[10020000]                mov  esi,id_buf
   181 00000163 E930010000                  jmp  cpuid_last_puts
   182                                  
   183                                  cpu_recognized :
   184 00000168 5B                          pop  ebx
   185 00000169 E839FFFFFF                  call puts
   186                                  
   187 0000016E 53                          push ebx
   188 0000016F B801000000                  mov  eax,1
   189 00000174 0FA2                        cpuid
   190 00000176 891D[04020000]              mov  [feature_ebx],ebx
   191 0000017C 890D[08020000]              mov  [feature_ecx],ecx  ; save feature flags
   192 00000182 8915[0C020000]              mov  [feature_edx],edx
   193 00000188 83F801                      cmp  eax,1
   194 0000018B BE[57000000]                mov  esi,cpunoid
   195 00000190 5B                          pop  ebx
   196 00000191 0F8201010000                jb   cpuid_last_puts
   197                                  
   198 00000197 53                          push ebx
   199 00000198 81E200020000                and  edx,1 << 9         ; test for apic feature
   200 0000019E BE[69000000]                mov  esi,cpunoapic
   201 000001A3 5B                          pop  ebx
   202 000001A4 0F84EE000000                jz   cpuid_last_puts
   203 000001AA BE[60000000]                mov  esi,cpuapic
   204 000001AF E8F3FEFFFF                  call puts
   205                                  
   206 000001B4 A1[04020000]                mov  eax,[feature_ebx]
   207 000001B9 C1E818                      shr  eax,24             ; mask off initial apic ID
   208 000001BC E8F3FEFFFF                  call putbx
   209                                  
   210                                      ; ---- mtrr for 0xfee00000 -> strong uncachable (UC)
   211                                  
   212                                      ; ---- access the local APIC
   213                                  
   214 000001C1 53                          push ebx
   215 000001C2 A13000E0FE                  mov  eax,[0xfee00030]
   216 000001C7 89C1                        mov  ecx,eax
   217 000001C9 25F0000000                  and  eax,0xf0           ; see if it is a local apic
   218 000001CE 83F810                      cmp  eax,0x10
   219 000001D1 5B                          pop  ebx
   220 000001D2 BE[79000000]                mov  esi,cpunolapic
   221 000001D7 0F85BB000000                jnz  cpuid_last_puts
   222 000001DD BE[72000000]                mov  esi,cpulapic
   223 000001E2 E8C0FEFFFF                  call puts
   224                                  
   225 000001E7 A1[08020000]                mov  eax,[feature_ecx]
   226 000001EC 2500002000                  and  eax,1 << 21        ; x2apic feature bit
   227 000001F1 740A                        jz   no_x2apic
   228 000001F3 BE[82000000]                mov  esi,cpux2apix
   229 000001F8 E8AAFEFFFF                  call puts
   230                                  no_x2apic :
   231                                  
   232 000001FD 89C8                        mov  eax,ecx
   233 000001FF E8BFFEFFFF                  call putx               ; Athlon +1600 says 0x00040010
   234                                                              ; Bochs        says 0x00050010
   235                                                              ; real intel   says 0x00050014
   236                                                              ; real amd     says 0x80050014
   237                                  
   238                                  ;   mov  ecx,0x1b
   239                                  ;   rdmsr
   240                                  ;   and  eax,0x100          ; are we the bootstrap processor?
   241                                  ;   jz   i_am_non_boot_cpu
   242                                  
   243                                      ; ---- restart other cpus (see swdev3a, sec 10.7, pg 484 / 10-45)
   244                                  
   245 00000204 53                          push ebx
   246                                  ;    mov  dword [0xfee00310],0xff000000  ; Broadcast
   247 00000205 C7050003E0FE00450C-         mov  dword [0xfee00300],0x000c4500  ; Physical, fixed, excluding self, INIT
   248 0000020E 00                 
   249                                  
   250 0000020F B800200000                  mov  eax,0x2000         ; oz syscall opcode - sleep 1 tick
   251 00000214 BA02000000                  mov  edx,2
   252 00000219 CDFF                        int  0xff
   253                                  
   254 0000021B C7050003E0FE01460C-         mov  dword [0xfee00300],(kstack_loc>>12) | 0xc4600               ; STARTUP
   255 00000224 00                 
   256                                  
   257 00000225 B800200000                  mov  eax,0x2000         ; oz syscall opcode - sleep 1 tick
   258 0000022A BA02000000                  mov  edx,2
   259 0000022F CDFF                        int  0xff
   260                                  
   261                                      ; the docs all say kick them twice ...
   262                                  
   263 00000231 C7050003E0FE01460C-         mov  dword [0xfee00300],(kstack_loc>>12) | 0xc4600               ; STARTUP
   264 0000023A 00                 
   265                                  
   266 0000023B B800200000                  mov  eax,0x2000         ; oz syscall opcode - sleep 1 tick
   267 00000240 BA02000000                  mov  edx,2
   268 00000245 CDFF                        int  0xff
   269                                  
   270                                  ;    mov  ecx,0x100000
   271                                  ;ipi_loop2 :
   272                                  ;    mov  eax,[0xfee00300]               ; 0xc0602
   273                                  ;    and  eax,1 << 12                    ; watch delivery status
   274                                  ;    loopz ipi_loop2
   275                                  
   276                                  ;   pop  ebx
   277                                  ;   mov  eax,ecx
   278                                  ;   call putx
   279                                  ;   mov  byte [ebx],'*'
   280                                  ;   inc  ebx
   281                                  ;   push ebx
   282                                  
   283                                      ; ---- report on the expected number of logical processors in each core
   284                                  
   285 00000247 A1[04020000]                mov  eax,[feature_ebx]
   286 0000024C C1E810                      shr  eax,16
   287 0000024F 25FF000000                  and  eax,0xff           ; number of threads per core
   288 00000254 83C030                      add  eax,'0'
   289 00000257 5B                          pop  ebx
   290 00000258 8803                        mov  [ebx],al
   291 0000025A 43                          inc  ebx
   292 0000025B C6033B                      mov  byte [ebx],';'
   293 0000025E 43                          inc  ebx
   294                                  
   295                                      ; ---- check for vmx support
   296                                  
   297 0000025F A1[08020000]                mov  eax,[feature_ecx]
   298 00000264 E85AFEFFFF                  call putx
   299                                  
   300 00000269 A1[08020000]                mov  eax,[feature_ecx]
   301 0000026E 83E020                      and  eax,1 << 5         ; vmx feature bit
   302 00000271 740A                        jz   no_vmx
   303 00000273 BE[8A000000]                mov  esi,cpuvmx
   304 00000278 E82AFEFFFF                  call puts
   305                                  no_vmx :
   306                                  
   307                                  ; can't rdmsr from ring 3
   308                                  ;   mov  ecx,0x3a           ; IA32_FEATURE_CONTROL_MSR
   309                                  ;   rdmsr
   310                                  ;   call putx
   311                                  
   312                                      ; cpuunavil
   313                                  
   314                                      ; ---- get the topology
   315                                  
   316 0000027D 833D[00020000]0B            cmp  dword [level],0xb
   317 00000284 720B                        jb   no_topology
   318 00000286 53                          push ebx
   319 00000287 B80B000000                  mov  eax,0xb
   320 0000028C 31C9                        xor  ecx,ecx
   321 0000028E 0FA2                        cpuid
   322                                      ; ....
   323 00000290 5B                          pop  ebx
   324                                  
   325                                  no_topology :
   326                                  
   327 00000291 EB0A                        jmp  cpuid_end
   328                                  
   329                                  i_am_non_boot_cpu :
   330 00000293 BE[A5000000]                mov  esi,cpuzzz
   331                                  
   332                                  cpuid_last_puts :
   333 00000298 E80AFEFFFF                  call puts
   334                                  cpuid_end :
   335                                  
   336 0000029D B800020000                  mov  eax,0x0200         ; oz syscall opcode - klog print
   337 000002A2 BE[00000000]                mov  esi,print_buf
   338 000002A7 CDFF                        int  0xff
   339                                  
   340 000002A9 CF                          iret
   341                                  
   342                                  ;   align 4096
   343                                  
   344 000002AA 00<rept>                    times 4096-($-$$) db 0x00
   345                                  
   346                                  
   347                                  ; r/w data - the second 4k ---------------------------------------
   348                                  section .data
   349                                  
   350                                  print_buf :                     ; 0x401000 the buffer to be written
   351                                  
   352 00000000 00<rept>                    times 512 db 0x00
   353                                  
   354 00000200 00000000                level       dd 0
   355 00000204 00000000                feature_ebx dd 0                ; saved feature flags
   356 00000208 00000000                feature_ecx dd 0
   357 0000020C 00000000                feature_edx dd 0
   358                                  
   359                                  id_buf :                        ; 0x401240
   360                                  
   361                                      ; all boot apps attached to the kernel must be
   362                                      ; a multiple of a page in length.  this space
   363                                      ; is also used for the application stack
   364                                  
   365 00000210 00<rept>                    times 4096*1-($-$$) db 0x00
   366                                  
   367                                  end :
   368                                  
